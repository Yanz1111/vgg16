import os, shutil
import random
import torchvision

def move_file(src, dst):
    if not os.path.isfile(src):
        print('src not exit')
    else:
        fpath, fname = os.path.split(dst)
        if not os.path.exists(fpath):
            os.makedirs(fpath)
        shutil.move(src, dst)

validation_rate = 0.2
img_num = 12500
test_num = int(img_num * validation_rate)

test_index = random.sample(range(0, img_num), test_num)
file_path = 'C:/Users/75634/Desktop/data/kagglecatsanddogs_3367a/PetImages'
train = 'train'
test = 'test'
cat = 'cat'
dog = 'dog'

for i in range(len(test_index)):
    src = os.path.join(file_path, train, cat, str(test_index[i]) + '.jpg')
    dst = os.path.join(file_path, test, cat, str(test_index[i]) + '.jpg')
    move_file(src, dst)

    src = os.path.join(file_path, train, dog, str(test_index[i]) + '.jpg')
    dst = os.path.join(file_path, test, dog, str(test_index[i]) + '.jpg')
    move_file(src, dst)

transforms = torchvision.transforms.Compose(
    [
        torchvision.transforms.RandomResizedCrop(150),
        torchvision.transforms.ToTensor(),
        torchvision.transforms.Normalize(mean = [0.485, 0.456, 0.406],
                             std = [0.229, 0.224, 0.225])
    ]
)

train_data = torchvision.datasets.ImageFolder(os.path.join(file_path, train), transforms)
test_data = torchvision.datasets.ImageFolder(os.path.join(file_path, test), transforms)

import torch
import torch.nn as nn
import torch.nn.functional as f
from torch.utils import data
import torch.optim as optim


train_loader = data.DataLoader(train_data, batch_size = 32, shuffle = True, pin_memory = True)
test_loader = data.DataLoader(test_data, batch_size = 32)

class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 20, 5, stride = 5, padding = 0)
        self.conv2 = nn.Conv2d(20, 50, 4, stride = 1, padding = 0)
        self.fc1 = nn.Linear(50 * 6 * 6, 200)
        self.fc2 = nn.Linear(200, 2)
    def forward(self, x):
        x = f.relu(self.conv1(x))
        x = f.max_pool2d(x, 2, 2)
        x = f.relu(self.conv2(x))
        x = f.max_pool2d(x, 2, 2)
        x = x.view(-1, 50 * 6 * 6)
        x = f.relu(self.fc1(x))
        x = self.fc2(x)
        return f.log_softmax(x, dim = 1)



device = torch.device("cuda" if torch.cuda.is_available() else "cpu" )
model = CNN().to(device)

optimizer = optim.Adam(model.parameters(),lr = 1e-4)
loss = torch.nn.CrossEntropyLoss()

def train(model, device, train_loader, optimizer, epoch, losses):
    model.train()
    for idx, (t_data, t_target) in enumerate(train_loader):
        t_data, t_target = t_data.to(device), t_target.to(device)
        pred = model(t_data)
        loss = f.nll_loss(pred, t_target)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        if idx % 10 == 0:
            print("epoch:{},iteration:{},loss:{}".format(epoch,idx,loss.item()))
            losses.append(loss.item())


def test(model, device, test_loader):
    model.eval()
    correct = 0
    with torch.no_grad():
        for idx, (t_data, t_target) in enumerate(test_loader):
            t_data, t_target=t_data.to(device), t_target.to(device)
            pred = model(t_data)
            pred_class = pred.argmax(dim=1)
            correct += pred_class.eq(t_target.view_as(pred_class)).sum().item()
    acc = correct/len(test_data)
    print("accuracy:{}".format(acc))


num_epochs = 10
losses = []
from time import *
begin_time = time()
for epoch in range(num_epochs):
    train(model, device, train_loader, optimizer, epoch, losses)

end_time = time()

test(model, device, test_loader)

